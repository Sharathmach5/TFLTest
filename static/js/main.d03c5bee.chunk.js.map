{"version":3,"sources":["components/LineComponent/line.js","components/LineComponent/index.js","App.js","utils/api.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","nested","paddingLeft","spacing","Line","_ref","line","onClick","expanded","classes","latestStatus","_","last","lineStatuses","react_default","a","createElement","key","id","ListItem","button","divider","alignItems","justify","ExpandLess_default","ExpandMore_default","ListItemText","primary","name","ListItemSecondaryAction","statusSeverityDescription","align","Collapse","in","timeout","unmountOnExit","List","component","disablePadding","map","status","className","ListItemIcon","statusSeverity","CheckCircleOutlined_default","ReportOutlined_default","reason","secondary","concat","moment","validityPeriods","fromDate","format","root","flexGrow","backgroundColor","palette","background","paper","padding","LineComponent","title","lines","_useState","useState","_useState2","Object","slicedToArray","checked","setChecked","handleToggle","value","currentIndex","indexOf","newChecked","toConsumableArray","push","splice","aria-labelledby","subheader","ListSubheader","LineComponent_line","api","baseURL","arguments","length","undefined","tflKeys","app_id","app_key","apisauce","create","headers","getBikePoints","get","getLines","getAirQuality","API","airqualitygridcontainerroot","width","marginTop","marginLeft","paddingRight","paddingTop","paddingBottom","menuButton","marginRight","container","margin","progress","marginBottom","tabContainer","gridContainer","footer","display","justifyContent","App","fetching","setFetching","_useState3","_useState4","bikePoints","setBikePoints","_useState5","_useState6","streetName","setStreetName","_useState7","_useState8","setLines","_useState9","_useState10","airQuality","setAirQuality","_useState11","visible","content","_useState12","errorSnack","setErrorSnack","_useState13","_useState14","setValue","fetchBikePoints","then","result","ok","data","console","log","problem","fetchLines","fetchAirQuality","useEffect","LinearProgress","color","variant","AppBar","position","style","Toolbar","Typography","Grid","direction","item","xs","Paper","Tabs","onChange","event","newValue","Tab","label","type","placeholder","target","filter","point","commonName","includes","points","dense","url","components_LineComponent","elevation","fontWeight","currentForecast","forecastType","forecastSummary","dangerouslySetInnerHTML","__html","forecastText","Snackbar","open","onClose","TransitionComponent","Fade","message","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d03c5bee.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport ExpandLess from \"@material-ui/icons/ExpandLess\";\r\nimport ExpandMore from \"@material-ui/icons/ExpandMore\";\r\nimport CheckCircleOutlinedIcon from '@material-ui/icons/CheckCircleOutlined';\r\nimport ReportOutlinedIcon from '@material-ui/icons/ReportOutlined';\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\n\r\n//Lodash makes JavaScript easier by taking the hassle out of working with arrays, numbers, objects, strings, etc.\r\n//we use lodash in our project to select last and first item in json response array\r\nimport _ from 'lodash';\r\n\r\n//moment library is used to format date contained in fromDate, toDate property in validityPeriods \r\n//in lines json response.\r\nimport moment from \"moment\";\r\n\r\n/*\r\n//THIS FILE REPRESENTS SINGLE NESTED LIST ITEM COMPONENT.\r\n//RETURNS LIST ITEM AND NESTED ITEM ALONG WITH PREFILLED DATA FROM API REQUEST\r\n//\r\n*/\r\nconst useStyles = makeStyles(theme => ({\r\n  nested: {\r\n    paddingLeft: theme.spacing(6)\r\n  }\r\n}));\r\n\r\nfunction Line({ line, onClick, expanded }) {\r\n  const classes = useStyles();\r\n  const latestStatus = _.last(line.lineStatuses);\r\n  //Returns <ListItem > using nested lists example from https://material-ui.com/components/lists/\r\n  return (\r\n    //key attribute should be given to every element of array so that react knows what changes are \r\n    //happening. here key is line.id\r\n    <div key={line.id}>\r\n      <ListItem button divider alignItems=\"center\"justify=\"center\" onClick={onClick}>\r\n        {expanded ? <ExpandLess /> : <ExpandMore />}\r\n        <ListItemText primary={line.name} />\r\n        <ListItemSecondaryAction key={latestStatus.id}>\r\n          <ListItemText\r\n            primary={latestStatus.statusSeverityDescription}\r\n            align=\"center\"\r\n          />\r\n        </ListItemSecondaryAction>\r\n      </ListItem>\r\n      <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n        <List component=\"div\" disablePadding>\r\n          {line.lineStatuses.map(status => (\r\n            <ListItem key={status.id} className={classes.nested}>\r\n              <ListItemIcon>\r\n                {status.statusSeverity === 10 ? (<CheckCircleOutlinedIcon />) : (<ReportOutlinedIcon />)}\r\n              </ListItemIcon>\r\n              <ListItemText\r\n                primary={status.statusSeverity !== 10  ? status.reason : status.statusSeverityDescription}\r\n                secondary={`${moment(status.validityPeriods.fromDate).format(\"DD/MM/YYYY HH:mm\")}`}\r\n              />\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Line;\r\n","import React, { useState } from 'react';\r\nimport List from '@material-ui/core/List';\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Line from './line';\r\n\r\n/*\r\n//THIS FILE REPRESENTS STATIONSLIST COMPONENT WHICH CONTAINS NESTED LIST WITH PREFILLED DATA.\r\n//LINECOMPONENT COMPONENT IS INCLUDED IN APP.JS. \r\n//IN THE WEBSITE YOU WILL SEE THIS COMPONENT IN SECOND TAB.\r\n*/\r\n\r\n//the flexGrow style attribute specifies how much of remaining space in the container should be assigned\r\n//to the items with flexGrow = 1 attribute. DOM tags with flexGrow = 2 are assigned more space than\r\n//DOM tags with flexGrow = 1.\r\n//more info here: https://developer.mozilla.org/en-US/docs/Web/CSS/flex-grow\r\n//here we assign flexGrow to material ui <List >\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    backgroundColor: theme.palette.background.paper,\r\n    padding: '15px',\r\n  },\r\n}));\r\n\r\n//the lines prop below contains an array of 15 objects representing lines and other fields like statusses.\r\n//the lines prop contains all current info about lines.\r\nfunction LineComponent({ title, lines }) {\r\n  const [checked, setChecked] = useState([]);\r\n  const handleToggle = value => () => {\r\n    const currentIndex = checked.indexOf(value);\r\n    const newChecked = [...checked];\r\n\r\n    if (currentIndex === -1) {\r\n      newChecked.push(value);\r\n    } else {\r\n      newChecked.splice(currentIndex, 1);\r\n    }\r\n\r\n    setChecked(newChecked);\r\n  };\r\n\r\n  function renderLines() {\r\n    //map() function allows you to pass a function that applies to every element of the lines array.\r\n    //remember lines contains array of 15objects contained in json response. Basically we're only selecting \r\n    //the fields in array which we're interested like name, lineStatuses.statusSeverity and lineStatuses.validityPeriods.FromData and ToDate\r\n    //and wrapping them in a nice Line component. this wrapping process is applied to every element in lines\r\n    //array using map function. after wrapping is done the array is then rendered onto screen as component.\r\n    return lines.map((line, _) => (\r\n      <Line\r\n        key={line.id}\r\n        line={line}\r\n        onClick={handleToggle(line.name)}\r\n        expanded={checked.indexOf(line.name) !== -1}\r\n      />\r\n    ));\r\n  }\r\n  //we can make use of makeStyles available in material UI.\r\n  const classes = useStyles();\r\n\r\n  //returning MaterialUi list component. use <ListSubHeader > to display subheading on top of list.\r\n  //format: <ListItem button> contains <ListItemIcon> or <ListItemText>.\r\n  //for complete api guide: https://material-ui.com/components/lists/.\r\n  return (\r\n    <List\r\n      component=\"nav\" aria-labelledby=\"nested-list-subheader\"\r\n      subheader={(\r\n        <ListSubheader component=\"div\" id=\"nested-list-subheader\">\r\n          {title}\r\n        </ListSubheader>\r\n       )}                   className={classes.root}\r\n    >\r\n      {/*conditional rendering below. In Javascript,  true && expression always evaluates to\r\n       expression, and false && expression always evaluates to false. Here if lines is empty meaning if it is\r\n       equal to undefined(since lines is state variable) then below evaluates to false or\r\n       if lines equals to empty array or array with elements, then evaluates to expression*/}\r\n      { lines && renderLines()}\r\n    </List>\r\n  );\r\n}\r\n\r\nexport default LineComponent;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\n\r\n/**\r\n * Material UI\r\n */\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Fade from \"@material-ui/core/Fade\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\n\r\n/**\r\n * Custom components\r\n */\r\nimport LineComponent from \"./components/LineComponent\";\r\n\r\n\r\n/**\r\n * Api\r\n */\r\nimport API from \"./utils/api\";\r\nimport { Palette } from \"@material-ui/icons\";\r\n\r\n/**\r\n * create function returns a list of {getBikePoints, getLines, getAirQuality}\r\n\r\n    you can use these functions below using api.functionname. You can add more functions to api.js file\r\n    to handle new apicalls. Project open for extension.\r\n */\r\nconst api = API.create();\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1\r\n  },\r\n  airqualitygridcontainerroot:{\r\n    backgroundColor:'steelblue', width:'100%', marginTop: '20px', marginLeft: '10px',\r\n    paddingLeft:'30px', paddingRight: '30px', paddingTop: '15px', paddingBottom:'15px',\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2)\r\n  },\r\n  title: {\r\n    flexGrow: 1\r\n  },\r\n  container: {\r\n    marginTop: theme.spacing(1)\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(3, 2),\r\n    margin: theme.spacing(1)\r\n  },\r\n  progress: {\r\n    marginTop: theme.spacing(8),\r\n    marginBottom: theme.spacing(-8)\r\n  },\r\n  tabContainer: {\r\n    marginTop: theme.spacing(1)\r\n  },\r\n  gridContainer: {\r\n    marginTop: theme.spacing(8)\r\n  },\r\n  footer: {\r\n      display: \"flex\",\r\n      flexGrow: 1,\r\n      alignItems: \"center\",\r\n      marginTop: theme.spacing(2),\r\n      justifyContent: \"center\"\r\n  }\r\n}));\r\n\r\nfunction App() {\r\n  const classes = useStyles();\r\n  const [fetching, setFetching] = useState(false);\r\n  const [bikePoints, setBikePoints] = useState();\r\n  const [streetName, setStreetName] = useState();\r\n  const [lines, setLines] = useState();\r\n  const [airQuality, setAirQuality] = useState();\r\n  //console.log('inside app' + lines);\r\n  const [errorSnack, setErrorSnack] = useState({\r\n    visible: false,\r\n    content: \"\"\r\n  });\r\n\r\n  /**\r\n   * Tabs state\r\n   */\r\n  const [value, setValue] = useState(0);\r\n  \r\n  function handleChange(event, newValue) {\r\n    switch (newValue) {\r\n      case 0:\r\n        fetchBikePoints();\r\n        break;\r\n      case 1:\r\n        fetchLines();\r\n        break;        \r\n      case 2:\r\n        fetchAirQuality();\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    setValue(newValue);\r\n  }\r\n\r\n  const styleInfo = {\r\n    paddingRight:'10px'\r\n  }\r\n\r\n  const fetchBikePoints = () => {\r\n    setFetching(true);\r\n    api.getBikePoints().then(result => {\r\n      if (result.ok) {\r\n        setBikePoints(result.data);\r\n        console.log(result.data);\r\n        setFetching(false);\r\n      } else {\r\n        setErrorSnack({ visible: true, content: result.problem });\r\n        setFetching(false);\r\n      }\r\n    });\r\n  };\r\n\r\n  const fetchLines = () => {\r\n    setFetching(true);\r\n    api.getLines().then(result => {\r\n      if (result.ok) {\r\n        setLines(result.data);\r\n       // console.log(result.data);\r\n        setFetching(false);\r\n      } else {\r\n        setErrorSnack({ visible: true, content: result.problem });\r\n        setFetching(false);\r\n      }\r\n    });\r\n  };\r\n\r\n  const fetchAirQuality = () => {\r\n    setFetching(true);\r\n    api.getAirQuality().then(result => {\r\n      if (result.ok) {\r\n        setAirQuality(result.data)\r\n        setFetching(false);\r\n      } else {\r\n        setErrorSnack({ visible: true, content: result.problem });\r\n        setFetching(false);\r\n      }\r\n    });\r\n  }\r\n\r\n  \r\n\r\n  //below useEffect Hoook is used to call fetchBikePoints() function when the component completes mounting\r\n  //or fetchBikePoints() function is called in componentDidMount() function.\r\n  //here it is called so that bikepoints can load upon first loading the page.\r\n  useEffect(() => {\r\n    fetchBikePoints();\r\n    fetchAirQuality();\r\n  }, []);\r\n\r\n\r\n  function handleSearch(event){\r\n    console.log(event.target.value);\r\n    setStreetName(event.target.value);\r\n  }\r\n  const renderFilteredBikePoints = () =>\r\n    bikePoints.filter((point)=>point.commonName.includes(streetName)).map((points, _) => (\r\n      <div>\r\n      <List\r\n      component=\"nav\"\r\n      aria-labelledby=\"nested-list-subheader\"\r\n      className={classes.root}>\r\n      <ListItem\r\n          dense\r\n          divider\r\n          alignItems=\"center\"\r\n          justify=\"center\"\r\n        >\r\n        <ListItemText primary={points.commonName} />\r\n        <ListItemSecondaryAction key={points.id}>\r\n          <ListItemText\r\n            primary={points.url}\r\n            align=\"center\"\r\n          />\r\n        </ListItemSecondaryAction>\r\n      </ListItem>\r\n    </List>\r\n    </div>\r\n  ));\r\n\r\n  //rendering third tab. it has grid layout with griditems.\r\n  const renderAirQuality = () => (\r\n       <div>\r\n          <Grid container className={classes.airqualitygridcontainerroot} spacing={3} justifyContent=\"space-between\" >\r\n             <Grid item xs={6}>\r\n               <Paper className={classes.paper} elevation={2}>\r\n                  <Typography variant={'h6'} style={{fontWeight:500}}>Forecast: {airQuality.currentForecast[0].forecastType}</Typography>\r\n                </Paper>\r\n             </Grid>\r\n             <Grid item xs={6}>\r\n               <Paper className={classes.paper} elevation={2}>\r\n                  <Typography variant={'h6'} style={{fontWeight:500}}>Forecast: {airQuality.currentForecast[1].forecastType}</Typography>\r\n                </Paper>\r\n             </Grid>\r\n\r\n             <Grid item xs={6}>\r\n               <Paper className={classes.paper} elevation={2}>\r\n                  <Typography variant={'body1'} style={{fontWeight:500}}>{airQuality.currentForecast[0].forecastSummary}</Typography>\r\n                 </Paper>\r\n             </Grid>\r\n             <Grid item xs={6}>\r\n               <Paper className={classes.paper} elevation={2}>\r\n                  <Typography variant={'body1'} style={{fontWeight:500}}>{airQuality.currentForecast[1].forecastSummary}</Typography>\r\n                 </Paper>\r\n             </Grid>\r\n\r\n             <Grid item xs={6}>\r\n               <Paper className={classes.paper} elevation={2}>\r\n                   <Typography variant={'body2'} style={{fontWeight:500}}><div dangerouslySetInnerHTML={ {__html: airQuality.currentForecast[0].forecastText} }/></Typography>\r\n                 </Paper>\r\n             </Grid>\r\n             <Grid item xs={6}>\r\n               <Paper className={classes.paper} elevation={2}>\r\n                   <Typography variant={'body2'} style={{fontWeight:500}}><div dangerouslySetInnerHTML={ {__html: airQuality.currentForecast[1].forecastText} }/></Typography>\r\n                 </Paper>\r\n             </Grid>\r\n          </Grid>\r\n       </div>\r\n  );\r\n\r\n  const onSnackClose = () => setErrorSnack({ visible: false, content: \"\" });\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {fetching && (\r\n        <LinearProgress\r\n          color=\"secondary\"\r\n          className={classes.progress}\r\n          variant=\"query\"\r\n        />\r\n      )}\r\n      <AppBar position=\"fixed\" style={{backgroundColor: '#002D72'}}>\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            Transport for London by Sharath\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Grid container className={classes.gridContainer} direction=\"row\">\r\n        <Grid item xs={12}>\r\n          <Paper className={classes.paper}>\r\n            <Tabs value={value} onChange={handleChange}>\r\n              <Tab label=\"Search Bike points\" />\r\n              <Tab label=\"Line status\" />\r\n              <Tab label='Air Quality Index' />\r\n            </Tabs>\r\n            {value === 0 && (\r\n              <div className={classes.tabContainer}>\r\n              <div>\r\n              <input type=\"text\" placeholder=\"Search by street name\"  onChange={handleSearch} />\r\n              {bikePoints && streetName && renderFilteredBikePoints()}\r\n              </div>\r\n              </div>\r\n            )}\r\n\r\n            {value === 1 && (\r\n              <div className={classes.tabContainer}>\r\n                <LineComponent\r\n                  title=\"London underground lines status\"\r\n                  lines={lines}\r\n                />\r\n              </div>\r\n            )}\r\n\r\n            {\r\n              value === 2 && (\r\n                <div className={classes.tabContainer}>\r\n                  {renderAirQuality()}\r\n                </div>\r\n              )}\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n      <Snackbar\r\n        open={errorSnack.visible}\r\n        onClose={onSnackClose}\r\n        variant=\"error\"\r\n        TransitionComponent={Fade}\r\n        message={errorSnack.content}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// a library to wrap and simplify api calls\r\nimport apisauce from 'apisauce';\r\n\r\n// our \"constructor\"\r\nconst create = (baseURL = 'https://api.tfl.gov.uk/') => {\r\n  //-----\r\n  //STEP 0\r\n  //-----\r\n  //\r\n  //Prepare the TFL subscription app id and app key\r\n  const tflKeys = {\r\n    app_id:'projectj',\r\n    app_key:'3dd2260d43cc4f72bf24377a21194aa9'\r\n  }\r\n\r\n  // ------\r\n  // STEP 1\r\n  // ------\r\n  //\r\n  // Create and configure an apisauce-based api object.\r\n  //\r\n  const api = apisauce.create({\r\n    // base URL is read from the \"constructor\"\r\n    baseURL,\r\n    // here are some default headers\r\n    headers: {},\r\n    // 10 second timeout...\r\n    timeout: 10000,\r\n  });\r\n\r\n\r\n  // ------\r\n  // STEP 2\r\n  // ------\r\n  //\r\n  // Define some functions that call the api.  The goal is to provide\r\n  // a thin wrapper of the api layer providing nicer feeling functions\r\n  // rather than \"get\", \"post\" and friends.\r\n  //\r\n  //\r\n  const getBikePoints = () => api.get('bikepoint/', tflKeys);\r\n\r\n  const getLines = () => api.get('line/mode/tube,overground,dlr,tflrail,tram/status/', tflKeys);\r\n\r\n  const getAirQuality = () => api.get('AirQuality/');\r\n  // ------\r\n  // STEP 3\r\n  // ------\r\n  //\r\n  // Return back a collection of functions that we would consider our\r\n  // interface.  It is just the list of all the\r\n  // methods in step 2.\r\n  //\r\n  // we're not returning back the `api` created in step 1... That's\r\n  // because it is scoped privately.\r\n  //\r\n  return {\r\n    getBikePoints,\r\n    getLines,\r\n    getAirQuality,\r\n  };\r\n};\r\n\r\n// let's return back our create method as the default.\r\nexport default {\r\n  create,\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost'\r\n    // [::1] is the IPv6 localhost address.\r\n    || window.location.hostname === '[::1]'\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    || window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\r\n    ),\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service '\r\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all '\r\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404\r\n        || (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.',\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}